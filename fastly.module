<?php

/**
 * @file
 * Fastly module.
 */

/**
 * Implements hook_init().
 */
function fastly_init() {
  module_load_include('inc', 'fastly', 'fastly.api');

  $no_store = array(
    'admin',
    'admin/*',
    'node/add',
    'node/add/*',
    'node/*/edit',
    'node/*/delete',
    'user/logout',
    'user/register',
    drupal_strtolower(variable_get('fastly_non_cached', ''))
  );

  $no_store = implode("\n", $no_store);
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  $messages = count(drupal_get_messages(NULL, FALSE));

  if (drupal_match_path($path, $no_store) || $messages > 0) {
    drupal_add_http_header('Surrogate-Control', 'no-store');
  }
  else {
    $default_ttl = variable_get('fastly_ttl', '86400');
    drupal_add_http_header('Surrogate-Control', "max-age=$default_ttl");
  }

  drupal_add_http_header('Vary', 'Cookie');
}

/**
 * Return permissions for the Fastly module.
 */
function fastly_permission() {
  $perms = array(
    'administer fastly' => array(
      'title' => t('Administer Fastly'),
      'description' => t('Allows users to administer Fastly.'),
      'restrict access' => TRUE,
    ),
  );

  return $perms;
}

/**
 * Implements hook_menu().
 */
function fastly_menu() {
  $items = array();

  $items['admin/config/services/fastly'] = array(
    'title' => t('Fastly configuration'),
    'description' => t('Fastly configuration'),
    'page callback' => 'fastly_select_page',
    'access arguments' => array('administer fastly'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/fastly/new'] = array(
    'title' => t('Create a service'),
    'description' => t('Create a service'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastly_new_service_form'),
    'access arguments' => array('administer fastly'),
    'file' => 'fastly.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/services/fastly/config'] = array(
    'title' => t('Configuration'),
    'description' => t('Fastly configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastly_setup_form'),
    'access arguments' => array('administer fastly'),
    'file' => 'fastly.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/fastly/register'] = array(
    'title' => t('Registration'),
    'description' => t('Fastly registration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastly_register_form'),
    'access arguments' => array('administer fastly'),
    'file' => 'fastly.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/fastly/purge'] = array(
    'title' => t('Purge cache'),
    'description' => t('Fastly purge cache'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fastly_purge_form'),
    'access arguments' => array('administer fastly'),
    'file' => 'fastly.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Menu callback. Redirect the user to the right page.
 */
function fastly_select_page() {
  if (variable_get('fastly_api_key', FALSE)) {
    $path = 'admin/config/services/fastly/config';
  }
  else {
    $path = 'admin/config/services/fastly/register';
  }
  drupal_goto($path);
}

/**
 * Implements hook_rules_action_info().
 */
function fastly_rules_action_info() {
  $actions = array();

  $actions['fastly_rules_action_purge'] = array(
    'label' => t('Purge the page.'),
    'group' => t('Fastly'),
  );

  return $actions;
}

/**
 * Rules action to purge the URL after the content is updated.
 */
function fastly_rules_action_purge() {
  $node = menu_get_object();
  $api = fastly_get_api();
  $api->purgePath('node/' . $node->nid);
}

/**
 * Implements hook_default_rules_configuration().
 * @TODO: Handle the updating of other entities. Not just nodes.
 */
function fastly_default_rules_configuration() {
  $rule = rules_reaction_rule();
  $rule->label = t('Purge Fastly cache when a content piece is updated.');
  $rule->active = TRUE;
  $rule->event('node_update')
  //->event('taxonomy_vocabulary_update')
  //->event('taxonomy_term_update')
  //->event('user_update')
  ->action('fastly_rules_action_purge');

  $configs['rules_fastly_purge'] = $rule;

  return $configs;
}

/**
 * Returns the API object. The key and service id can be overriden for validation reasons.
 */
function fastly_get_api($api_key = '', $service_id = '') {
  if (empty($api_key)) {
    $api_key = variable_get('fastly_api_key', '');
  }

  if (empty($service_id)) {
    $service_id = variable_get('fastly_service_id', '');
  }

  return new Fastly($api_key, $service_id);
}
